<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blog.Core.Repository</name>
    </assembly>
    <members>
        <member name="M:Blog.Core.Repository.BaseRepository`1.Add(`0)">
            <summary>
            新增
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.delete(`0)">
            <summary>
            通过实体删除
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.deleteById(System.Object)">
            <summary>
            通过ID删除
            </summary>
            <param name="id">主键</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.deleteByIds(System.Object[])">
            <summary>
            批量删除
            </summary>
            <param name="lstIds">删除集合</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.Query">
            <summary>
            查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.Query(System.String)">
            <summary>
            查询
            </summary>
            <param name="strWhere">条件</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查询数据列表
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            查询一个列表
            </summary>
            <param name="whereExpression">条件表达式</param>
            <param name="strOrderByFileds">排序字段，如name asc,age desc</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            查询前N条数据
            </summary>
            <param name="whereExpression">条件</param>
            <param name="orderByExpression">排序</param>
            <param name="isAsc">是否排序</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.Query(System.String,System.String)">
            <summary>
            查询一个列表
            </summary>
            <param name="strWhere">条件</param>
            <param name="strOrderByFileds">排序字段，如name,asc,age,desc</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.String)">
            <summary>
            查询前N条数据
            </summary>
            <param name="whereExpression">条件表达式</param>
            <param name="intTop">前N条</param>
            <param name="strOrderByFileds">排序字段，如name asc,age desc</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.Query(System.String,System.Int32,System.String)">
            <summary>
            查询前N条数据
            </summary>
            <param name="strWhere">条件</param>
            <param name="intTop">前N条</param>
            <param name="strOrderByFileds">排序字段，如name asc,age desc</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,System.String)">
            <summary>
            分页查询
            </summary>
            <param name="whereExpression">条件表达式</param>
            <param name="intPageIndex">页码（下标0）</param>
            <param name="intPageSize">页大小</param>
            <param name="strOrderByFileds">排序字段，如name asc,age desc</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.Query(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="strWhere"></param>
            <param name="intPageIndex"></param>
            <param name="intPageSize"></param>
            <param name="strOrderByFileds"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.QueryById(System.Object)">
            <summary>
            
            </summary>
            <param name="objId"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.QueryById(System.Object,System.Boolean)">
            <summary>
            通过ID查询
            </summary>
            <param name="objId">主键</param>
            <param name="blnUseCache">是否启动缓存</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.QueryByIds(System.Object[])">
            <summary>
            
            </summary>
            <param name="lstIds"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.QueryPage(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="whereExpression"></param>
            <param name="intPageIndex"></param>
            <param name="intPageSize"></param>
            <param name="strOrderByFileds"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.Update(`0)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.Update(`0,System.String)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="strWhere"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Repository.BaseRepository`1.Update(`0,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="lstColumns"></param>
            <param name="lstIgnoreColumns"></param>
            <param name="strWhere"></param>
            <returns></returns>
        </member>
        <member name="P:Blog.Core.Repository.DbContext.ConnectionString">
            <summary>
            连接字符串 
            Blog.Core
            </summary>
        </member>
        <member name="P:Blog.Core.Repository.DbContext.DbType">
            <summary>
            数据库类型 
            Blog.Core 
            </summary>
        </member>
        <member name="P:Blog.Core.Repository.DbContext.Db">
            <summary>
            数据连接对象 
            Blog.Core 
            </summary>
        </member>
        <member name="P:Blog.Core.Repository.DbContext.Context">
            <summary>
            数据库上下文实例（自动关闭连接）
            Blog.Core 
            </summary>
        </member>
        <member name="M:Blog.Core.Repository.DbContext.#ctor">
            <summary>
            功能描述:构造函数
            作　　者:Blog.Core
            </summary>
        </member>
        <member name="M:Blog.Core.Repository.DbContext.#ctor(System.Boolean)">
            <summary>
            功能描述:构造函数
            作　　者:Blog.Core
            </summary>
            <param name="blnIsAutoCloseConnection">是否自动关闭连接</param>
        </member>
        <member name="M:Blog.Core.Repository.DbContext.GeTDB``1">
            <summary>
            功能描述:获取数据库处理对象
            作　　者:Blog.Core
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:Blog.Core.Repository.DbContext.GeTDB``1(SqlSugar.SqlSugarClient)">
            <summary>
            功能描述:获取数据库处理对象
            作　　者:Blog.Core
            </summary>
            <param name="db">db</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Blog.Core.Repository.DbContext.CreateClassFileByDBTalbe(System.String)">
            <summary>
            功能描述:根据数据库表生产实体类
            作　　者:Blog.Core
            </summary>       
            <param name="strPath">实体类存放路径</param>
        </member>
        <member name="M:Blog.Core.Repository.DbContext.CreateClassFileByDBTalbe(System.String,System.String)">
            <summary>
            功能描述:根据数据库表生产实体类
            作　　者:Blog.Core
            </summary>
            <param name="strPath">实体类存放路径</param>
            <param name="strNameSpace">命名空间</param>
        </member>
        <member name="M:Blog.Core.Repository.DbContext.CreateClassFileByDBTalbe(System.String,System.String,System.String[])">
            <summary>
            功能描述:根据数据库表生产实体类
            作　　者:Blog.Core
            </summary>
            <param name="strPath">实体类存放路径</param>
            <param name="strNameSpace">命名空间</param>
            <param name="lstTableNames">生产指定的表</param>
        </member>
        <member name="M:Blog.Core.Repository.DbContext.CreateClassFileByDBTalbe(System.String,System.String,System.String[],System.String,System.Boolean)">
            <summary>
            功能描述:根据数据库表生产实体类
            作　　者:Blog.Core
            </summary>
            <param name="strPath">实体类存放路径</param>
            <param name="strNameSpace">命名空间</param>
            <param name="lstTableNames">生产指定的表</param>
            <param name="strInterface">实现接口</param>
        </member>
        <member name="M:Blog.Core.Repository.DbContext.CreateTableByEntity``1(System.Boolean,``0[])">
            <summary>
            功能描述:根据实体类生成数据库表
            作　　者:Blog.Core
            </summary>
            <param name="blnBackupTable">是否备份表</param>
            <param name="lsTs">指定的实体</param>
        </member>
        <member name="M:Blog.Core.Repository.DbContext.CreateTableByEntity(System.Boolean,System.Type[])">
            <summary>
            功能描述:根据实体类生成数据库表
            作　　者:Blog.Core
            </summary>
            <param name="blnBackupTable">是否备份表</param>
            <param name="lsTs">指定的实体</param>
        </member>
        <member name="M:Blog.Core.Repository.DbContext.GetDbContext(System.Boolean)">
            <summary>
            功能描述:获得一个DbContext
            作　　者:Blog.Core
            </summary>
            <param name="blnIsAutoCloseConnection">是否自动关闭连接（如果为false，则使用接受时需要手动关闭Db）</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Blog.Core.Repository.DbContext.Init(System.String,SqlSugar.DbType)">
            <summary>
            功能描述:设置初始化参数
            作　　者:Blog.Core
            </summary>
            <param name="strConnectionString">连接字符串</param>
            <param name="enmDbType">数据库类型</param>
        </member>
        <member name="M:Blog.Core.Repository.DbContext.GetConnectionConfig(System.Boolean,System.Boolean)">
            <summary>
            功能描述:创建一个链接配置
            作　　者:Blog.Core
            </summary>
            <param name="blnIsAutoCloseConnection">是否自动关闭连接</param>
            <param name="blnIsShardSameThread">是否夸类事务</param>
            <returns>ConnectionConfig</returns>
        </member>
        <member name="M:Blog.Core.Repository.DbContext.GetCustomDB(SqlSugar.ConnectionConfig)">
            <summary>
            功能描述:获取一个自定义的DB
            作　　者:Blog.Core
            </summary>
            <param name="config">config</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Blog.Core.Repository.DbContext.GetCustomEntityDB``1(SqlSugar.SqlSugarClient)">
            <summary>
            功能描述:获取一个自定义的数据库处理对象
            作　　者:Blog.Core
            </summary>
            <param name="sugarClient">sugarClient</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Blog.Core.Repository.DbContext.GetCustomEntityDB``1(SqlSugar.ConnectionConfig)">
            <summary>
            功能描述:获取一个自定义的数据库处理对象
            作　　者:Blog.Core
            </summary>
            <param name="config">config</param>
            <returns>返回值</returns>
        </member>
    </members>
</doc>
